/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rmit.se2.pkg2012a.skoorti.view.panel;

import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;
import rmit.se2.pkg2012a.skoorti.model.GameFactory;
import rmit.se2.pkg2012a.skoorti.model.util.Mediator;
import rmit.se2.pkg2012a.skoorti.model.research.Research;

/**
 *
 * @author zozo
 */
public class ResearchView extends javax.swing.JPanel implements Observer {

    private Research model;
    
    /**
     * Creates new form ResearchView
     */
    public ResearchView(Research model) {
        initComponents();
        this.model = model;
        this.model.addObserver(this);
        if (this.model.isActive()) {
            this.currentProgress.setValue(this.model.getCurrent());
        }
        this.currentProgress.setMaximum(this.model.getCompleteTime());
        this.controlBtn.setVisible(false);
        this.buyBtn.setToolTipText(model.getDescription());
        this.nameLabel.setText(model.getName() + " ($" + model.getCost() + ")");
        renderButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currentProgress = new javax.swing.JProgressBar();
        buyBtn = new javax.swing.JButton();
        controlBtn = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();

        buyBtn.setText("Buy");
        buyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyBtnActionPerformed(evt);
            }
        });

        controlBtn.setText("Pause");
        controlBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlBtnActionPerformed(evt);
            }
        });

        nameLabel.setText("jLabel1");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(buyBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(controlBtn))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(nameLabel)
                            .add(currentProgress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(nameLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(currentProgress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buyBtn)
                    .add(controlBtn))
                .add(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyBtnActionPerformed
        // TODO add your handling code here:
        int choice = JOptionPane.showConfirmDialog(null, "This will cost you $" + model.getCost(), "Are you sure ?", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            Mediator.publish("research:new", this.model);
            renderButtons();
        }
    }//GEN-LAST:event_buyBtnActionPerformed

    private void controlBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlBtnActionPerformed
        // TODO add your handling code here:
        this.model.pause();
        renderButtons();
    }//GEN-LAST:event_controlBtnActionPerformed

    private void renderButtons() {
        if (this.model.isActive()) {
            this.controlBtn.setVisible(true);
            this.buyBtn.setVisible(false);
        } else {
            this.buyBtn.setVisible(true);
        }
        
        if (this.model.isPause()) {
            this.controlBtn.setText("Resume");
        } else {
            this.controlBtn.setText("Pause");
        }
        
        if (this.model.isCompleted()) {
            this.complete();
        }
    }
    
    private void complete() {
        this.nameLabel.setText(this.model.getName() + " (Completed)");
        this.controlBtn.setVisible(false);
        this.buyBtn.setVisible(false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buyBtn;
    private javax.swing.JButton controlBtn;
    private javax.swing.JProgressBar currentProgress;
    private javax.swing.JLabel nameLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object o1) {
        int current = Integer.valueOf(o1.toString());
        this.currentProgress.setValue(current);
        this.currentProgress.repaint();
        if (this.model.isCompleted()) {
            this.complete();
        }
    }
}
